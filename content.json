{"meta":{"title":"zoug2016","subtitle":"blog","description":"share ebd dev","author":"zoug2016","url":"https://zoug2016.github.io","root":"/"},"pages":[{"title":"关于我","date":"2023-05-03T04:23:29.808Z","updated":"2023-05-03T04:23:29.808Z","comments":false,"path":"about/index.html","permalink":"https://zoug2016.github.io/about/index.html","excerpt":"","text":"一名车载嵌入式开发工程师 ● ASPICE ● ISO26262 ● ARM ● RTOS ● Linux ● Compile ● CyberSecurity ● Driver Development ● … E-mail: zoug2016@qq.com"},{"title":"分类","date":"2023-05-03T02:59:32.260Z","updated":"2023-05-03T02:59:32.260Z","comments":false,"path":"categories/index.html","permalink":"https://zoug2016.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2023-05-03T02:59:36.462Z","updated":"2023-05-03T02:59:36.462Z","comments":false,"path":"tags/index.html","permalink":"https://zoug2016.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"004-freertos-mpu-cm3-demo","slug":"004-freertos-mpu-cm3-demo","date":"2023-05-03T15:13:02.000Z","updated":"2023-05-03T16:42:54.025Z","comments":true,"path":"2023/05/03/004-freertos-mpu-cm3-demo/","link":"","permalink":"https://zoug2016.github.io/2023/05/03/004-freertos-mpu-cm3-demo/","excerpt":"","text":"FreeRTOS中使用MPU进行任务之间的隔离，本文主要分析Cortex-M3的demo代码和kernel的实现过程 为了任务之间安全隔离，在FeeRTOS中可以使用MPU（需硬件支持）进行任务之间的隔离，本文主要分析Cortex-M3的demo支持MPU的主要代码框架 源码说明https://github.com/FreeRTOS/FreeRTOS中demo的源码，其中FreeRTOS/Source为kernel代码，作为FreeRTOS git库的submodule，其代码工程在https://github.com/FreeRTOS/FreeRTOS-Kernel 为了查看分析代码方便，可直接在https://github.com/FreeRTOS/FreeRTOS/releases中下载源码包，我下载当前最新的是[FreeRTOSv202212.01](https://github.com/FreeRTOS/FreeRTOS/releases/tag/202212.01) 解压FreeRTOSv202212.01后，要分析的M3的相关代码如下： App demo FreeRTOS\\Demo\\CORTEX_MPU_M3_NUCLEO_L152RE_GCC FreeRTOS\\Demo\\CORTEX_MPU_M3_NUCLEO_L152RE_GCC\\Demo\\mpu_demo.c prvROAccessTask Implements the task which has Read Only access to the memory region ucSharedMemory. prvRWAccessTask Implements the task which has Read Write access to the memory region ucSharedMemory. vStartMPUDemo 定义栈 xROAccessTaskStack 和 xRWAccessTaskStack 定义任务的参数xROAccessTaskParameters和xRWAccessTaskParameters， 包括xRegions xTaskCreateRestricted( &amp;( xROAccessTaskParameters ), NULL ) unprivileged task with RO access to ucSharedMemory. xTaskCreateRestricted( &amp;( xRWAccessTaskParameters ), NULL ) unprivileged task with RW access to ucSharedMemory. FreeRTOS kernel实现代码 FreeRTOS\\Source 头文件在FreeRTOS\\Source\\include FreeRTOS\\Source\\event_groups.c FreeRTOS\\Source\\list.c FreeRTOS\\Source\\queue.c FreeRTOS\\Source\\tasks.c FreeRTOS\\Source\\timers.c 实现MPU的CM3移植代码 FreeRTOS\\Source\\portable\\GCC\\ARM_CM3_MPU FreeRTOS\\Source\\portable\\GCC\\ARM_CM3_MPU\\portmacro.h Type definitions. 123456789101112#define portCHAR char #define portFLOAT float #define portDOUBLE double #define portLONG long #define portSHORT short #define portSTACK_TYPE uint32_t #define portBASE_TYPE long typedef portSTACK_TYPE StackType_t; typedef long BaseType_t; typedef unsigned long UBaseType_t; ... MPU specific constants. 123456789101112 ... typedef struct MPU_REGION_REGISTERS &#123; uint32_t ulRegionBaseAddress; uint32_t ulRegionAttribute; &#125; xMPU_REGION_REGISTERS;/* Plus 1 to create space for the stack region. */ typedef struct MPU_SETTINGS &#123; xMPU_REGION_REGISTERS xRegion[ portTOTAL_NUM_REGIONS_IN_TCB ]; &#125; xMPU_SETTINGS; SVC numbers for various services 123#define portSVC_START_SCHEDULER 0 #define portSVC_YIELD 1 #define portSVC_RAISE_PRIVILEGE 2 Scheduler utilities. #define portYIELD() __asm volatile ( “ SVC %0 \\n”::”i” ( portSVC_YIELD ) : “memory” ) portYIELD_WITHIN_API() portYIELD_FROM_ISR( x ) Critical section management Generic helper function. Store&#x2F;clear the ready priorities in a bit map Checks whether or not the processor is privileged. Raise an SVC request to raise privilege. #define portRAISE_PRIVILEGE() __asm volatile ( “svc %0 \\n” ::”i” ( portSVC_RAISE_PRIVILEGE ) : “memory” ); Lowers the privilege level by setting the bit 0 of the CONTROL register. ​ FreeRTOS\\Source\\portable\\GCC\\ARM_CM3_MPU\\port.c Constants required to access and manipulate the NVIC - Constants required to access and manipulate the MPU. - Constants required to access and manipulate the SysTick. - Constants required to check the validity of an interrupt priority - Offsets in the stack to the parameters when inside the SVC handler. - Standard FreeRTOS exception handlers. &gt; void xPortPendSVHandler( void ) __attribute__( ( naked ) ) PRIVILEGED_FUNCTION; &gt; &gt; void xPortSysTickHandler( void ) __attribute__( ( optimize( &quot;3&quot; ) ) ) PRIVILEGED_FUNCTION; &gt; &gt; void vPortSVCHandler( void ) __attribute__( ( naked ) ) PRIVILEGED_FUNCTION; - Starts the scheduler by restoring the context of the first task to run. &gt; static void prvRestoreContextOfFirstTask( void ) - C portion of the SVC handler &gt; /* &gt; &gt; \\* C portion of the SVC handler. The SVC handler is split between an asm entry &gt; &gt; \\* and a C wrapper for simplicity of coding and maintenance. &gt; &gt; */ &gt; &gt; static void prvSVCHandler( uint32_t * pulRegisters ) __attribute__( ( noinline ) ) PRIVILEGED_FUNCTION; - pxPortInitialiseStack - vPortSVCHandler SVC软中断后执行的函数，调用过程为： **vPortSVCHandler** -&gt; static void prvSVCHandler( uint32_t * pulParam ) ​ -&gt; portSVC_START_SCHEDULER ​ -&gt; prvRestoreContextOfFirstTask() ​ -&gt; portSVC_YIELD ​ -&gt;portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT [**触发PENSV**] ​ -&gt; portSVC_RAISE_PRIVILEGE 1234567__asm volatile(&quot; mrs r1, control \\n&quot;/* Obtain current control value. */&quot; bic r1, #1 \\n&quot;/* Set privilege bit. */&quot; msr control, r1 \\n&quot;/* Write back new control value. */::: &quot;r1&quot;, &quot;memory&quot;); ​ - prvRestoreContextOfFirstTask - xPortStartScheduler - vPortEndScheduler - vPortEnterCritical - vPortExitCritical - xPortPendSVHandler - Disable MPU. - read and write 4 sets of MPU registers. - Enable MPU - xPortSysTickHandler &gt; /* Pend a context switch. */ &gt; &gt; portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; - vPortSetupTimerInterrupt - prvSetupMPU - prvGetMPURegionSizeSetting - xIsPrivileged - vResetPrivilege - vPortStoreTaskMPUSettings &gt; 在task.c中prvInitialiseNewTask和vTaskAllocateMPURegions中调用 任务的MPU属性配置FreeRTOS\\Demo\\CORTEX_MPU_M3_NUCLEO_L152RE_GCC\\Demo\\mpu_demo.c 12345678910111213141516171819202122232425262728TaskParameters_t xROAccessTaskParameters =&#123; .pvTaskCode = prvROAccessTask, .pcName = &quot;ROAccess&quot;, .usStackDepth = configMINIMAL_STACK_SIZE, .pvParameters = NULL, .uxPriority = tskIDLE_PRIORITY, .puxStackBuffer = xROAccessTaskStack, .xRegions = &#123; &#123; ucSharedMemory, SHARED_MEMORY_SIZE, portMPU_REGION_PRIVILEGED_READ_WRITE_UNPRIV_READ_ONLY | portMPU_REGION_EXECUTE_NEVER &#125;, &#123; ( void * ) ucROTaskFaultTracker, SHARED_MEMORY_SIZE, portMPU_REGION_READ_WRITE | portMPU_REGION_EXECUTE_NEVER &#125;, &#123; 0, 0, 0 &#125;, &#125;&#125;;TaskParameters_t xRWAccessTaskParameters =&#123; .pvTaskCode = prvRWAccessTask, .pcName = &quot;RWAccess&quot;, .usStackDepth = configMINIMAL_STACK_SIZE, .pvParameters = NULL, .uxPriority = tskIDLE_PRIORITY, .puxStackBuffer = xRWAccessTaskStack, .xRegions = &#123; &#123; ucSharedMemory, SHARED_MEMORY_SIZE, portMPU_REGION_READ_WRITE | portMPU_REGION_EXECUTE_NEVER&#125;, &#123; 0, 0, 0 &#125;, &#123; 0, 0, 0 &#125;, &#125;&#125;; 需要MPU切换的地方 哪些时候需要进行硬件MPU的切换 xPortSysTickHandler portYIELD() portYIELD_FROM_ISR portYIELD_WITHIN_API 任务切换过程 任务切换时的需要使用软中断，切换新任务运行时需要将任务配置的MPU属性设置到硬件MPU中 Disable MPU. read and write 4 sets of MPU registers. Enable MPUFreeRTOS\\Source\\portable\\GCC\\ARM_CM3_MPU\\port.c prvRestoreContextOfFirstTask 1234567891011121314151617...&quot; dmb \\n&quot;/* Complete outstanding transfers before disabling MPU. */ &quot; ldr r2, =0xe000ed94 \\n&quot;/* MPU_CTRL register. */ &quot; ldr r3, [r2] \\n&quot;/* Read the value of MPU_CTRL. */ &quot; bic r3, #1 \\n&quot;/* r3 = r3 &amp; ~1 i.e. Clear the bit 0 in r3. */ &quot; str r3, [r2] \\n&quot;/* Disable MPU. */ &quot; \\n&quot; &quot; ldr r2, =0xe000ed9c \\n&quot;/* Region Base Address register. */ &quot; ldmia r1!, &#123;r4-r11&#125; \\n&quot;/* Read 4 sets of MPU registers. */ &quot; stmia r2!, &#123;r4-r11&#125; \\n&quot;/* Write 4 sets of MPU registers. */ &quot; \\n&quot; &quot; ldr r2, =0xe000ed94 \\n&quot;/* MPU_CTRL register. */ &quot; ldr r3, [r2] \\n&quot;/* Read the value of MPU_CTRL. */ &quot; orr r3, #1 \\n&quot;/* r3 = r3 | 1 i.e. Set the bit 0 in r3. */ &quot; str r3, [r2] \\n&quot;/* Enable MPU. */ &quot; dsb \\n&quot;/* Force memory writes before continuing. */... xPortPendSVHandler 1234567891011121314151617... &quot; dmb \\n&quot;/* Complete outstanding transfers before disabling MPU. */ &quot; ldr r2, =0xe000ed94 \\n&quot;/* MPU_CTRL register. */ &quot; ldr r3, [r2] \\n&quot;/* Read the value of MPU_CTRL. */ &quot; bic r3, #1 \\n&quot;/* r3 = r3 &amp; ~1 i.e. Clear the bit 0 in r3. */ &quot; str r3, [r2] \\n&quot;/* Disable MPU. */ &quot; \\n&quot; &quot; ldr r2, =0xe000ed9c \\n&quot;/* Region Base Address register. */ &quot; ldmia r1!, &#123;r4-r11&#125; \\n&quot;/* Read 4 sets of MPU registers. */ &quot; stmia r2!, &#123;r4-r11&#125; \\n&quot;/* Write 4 sets of MPU registers. */ &quot; \\n&quot; &quot; ldr r2, =0xe000ed94 \\n&quot;/* MPU_CTRL register. */ &quot; ldr r3, [r2] \\n&quot;/* Read the value of MPU_CTRL. */ &quot; orr r3, #1 \\n&quot;/* r3 = r3 | 1 i.e. Set the bit 0 in r3. */ &quot; str r3, [r2] \\n&quot;/* Enable MPU. */ &quot; dsb \\n&quot;/* Force memory writes before continuing. */...","categories":[{"name":"freertos","slug":"freertos","permalink":"https://zoug2016.github.io/categories/freertos/"},{"name":"mpu","slug":"mpu","permalink":"https://zoug2016.github.io/categories/mpu/"}],"tags":[{"name":"freertos","slug":"freertos","permalink":"https://zoug2016.github.io/tags/freertos/"},{"name":"mpu","slug":"mpu","permalink":"https://zoug2016.github.io/tags/mpu/"}],"author":"zoug2016"},{"title":"003-hexo-front-matter-rules","slug":"003-hexo-front-matter-rules","date":"2023-05-03T02:07:59.000Z","updated":"2023-05-03T03:50:34.772Z","comments":true,"path":"2023/05/03/003-hexo-front-matter-rules/","link":"","permalink":"https://zoug2016.github.io/2023/05/03/003-hexo-front-matter-rules/","excerpt":"","text":"介绍 Front-matter 是文件最上方以 --- 分隔的区域，用于指定个别文件的变量，举例来说： 12345678---title: 003-hexo-front-matter-rulesauthor: zoug2016date: 2023-05-03 10:07:59tags: hexocategories: - hexo--- 以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。 参数 描述 默认值 layout 布局 config.default_layout title 标题 文章的文件名 date 建立日期 文件建立日期 updated 更新日期 文件更新日期 comments 开启文章的评论功能 true tags 标签（不适用于分页） categories 分类（不适用于分页） permalink 覆盖文章的永久链接，永久链接应该以 / 或 .html 结尾 null excerpt 纯文本的页面摘要。使用 该插件 来格式化文本 disableNunjucks 启用时禁用 Nunjucks 标签 &#123;&#123; &#125;&#125;/&#123;% %&#125; 和 标签插件 的渲染功能 false lang 设置语言以覆盖 自动检测 继承自 _config.yml 布局 根据 _config.yml 中 default_layout 的设置，默认布局是 post 。当文章中的布局被禁用(layout: false)，它将不会使用主题处理。然而，它仍然会被任何可用的渲染引擎渲染：如果一篇文章是用 Markdown 写的，并且安装了 Markdown 渲染引擎（比如默认的 hexo-renderer-marked)，它将被渲染成HTML。 除非通过 disableNunjucks 设置或 渲染引擎 禁用，否则无论布局如何，标签插件 总是被处理。 分类和标签 只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别： 分类具有顺序性和层次性，也就是说 Foo, Bar 不等于 Bar, Foo； 而标签没有顺序和层次。 12345categories:- Diarytags:- PS3- Games 分类方法的分歧 如果您有过使用 WordPress 的经验，就很容易误解 Hexo 的分类方式。WordPress 支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是 Hexo 不支持指定多个同级分类。下面的指定方法： 123categories: - Diary - Life 会使分类 Life 成为 Diary 的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。 如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。 1234categories:- [Diary, PlayStation]- [Diary, Games]- [Life] 此时这篇文章同时包括三个分类： PlayStation 和 Games 分别都是父分类 Diary 的子分类，同时 Life 是一个没有子分类的分类。 参考： Front-matter | Hexo","categories":[{"name":"hexo","slug":"hexo","permalink":"https://zoug2016.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://zoug2016.github.io/tags/hexo/"}],"author":"zoug2016"},{"title":"002-ebd-basic-books","slug":"002-ebd-basic-books","date":"2023-05-03T01:31:04.000Z","updated":"2023-05-03T10:42:57.901Z","comments":true,"path":"2023/05/03/002-ebd-basic-books/","link":"","permalink":"https://zoug2016.github.io/2023/05/03/002-ebd-basic-books/","excerpt":"","text":"嵌入式学习图书与视频1. C语言 主要包括几个核心知识点：三大语法结构、常用的数据类型、函数、结构体、指针、文件操作等。 1.1. C程序设计语言C程序设计语言（原书第2版·新版 典藏版） [The C Programming Language Second Edition] C程序设计语言（原书第2版·新版 典藏版）- 京东图书 (jd.com) 1.2. C程序设计语言习题解答C程序设计语言习题解答（第2版 新版 典藏版） [The C Answer Book Second Edition 《C程序设计语言习题解答（第2版 新版 典藏版）》【摘要 书评 试读】- 京东图书 (jd.com) 1.3. C和指针C和指针 ![img](c_pointer_on_ c.png) 1.4. C 陷阱与缺陷C 陷阱与缺陷 1.5. C专家编程C专家编程","categories":[{"name":"ebd","slug":"ebd","permalink":"https://zoug2016.github.io/categories/ebd/"},{"name":"books","slug":"ebd/books","permalink":"https://zoug2016.github.io/categories/ebd/books/"}],"tags":[{"name":"books","slug":"books","permalink":"https://zoug2016.github.io/tags/books/"}],"author":"zoug2016"},{"title":"001-ebd_learn_roadmap","slug":"001-ebd-learn-roadmap-md","date":"2023-05-02T06:35:20.000Z","updated":"2023-05-03T14:57:56.763Z","comments":true,"path":"2023/05/02/001-ebd-learn-roadmap-md/","link":"","permalink":"https://zoug2016.github.io/2023/05/02/001-ebd-learn-roadmap-md/","excerpt":"","text":"嵌入式基础必备知识C语言基础 三大语法结构、常用的数据类型、函数、结构体、指针、文件操作 数据结构 数组、队列、链表、堆栈、树、图、散列表等 计算机原理 数据表示和运算、存储系统、指令系统、总线系统、中央处理器、输入输出系统等 操作系统 进程管理、内存管理、文件管理、输入输出管理等 硬件基础知识 电路基础知识、数电模电基础知识、常用的电子元器件等 CPU单片机 51单片机 软件：认识单片机、熟悉逻辑运算、点亮一颗LED灯、按键检测、串口通信、定时器、中断 硬件：电阻元器件了解，基本模块电路了解，时钟电路，尝试绘制51单片机原理图和PCB ARM处理器STM32● 基础练习 主要练习：点亮LED灯、GPIO的输入输出操作、中断操作、UART通信、IIC通信等 ● 进阶练习 主要练习：DMA通信、SPI通信、CAN通信、LCD显示屏，ADC等 ● 高阶练习 主要学习：STM32时钟架构、总线架构、电源管理、代码框架、SDIO通信、USB通信等。 ● 学习建议及资料 STM32会有寄存器和库函数两个版本，建议交叉学习，理解会更加深刻推荐正点原子、野火的STM32F103或者STM32F407系列 Cortex-MCortex-RCortex-AZynq7020[ZYNQ领航者V2开发板] (http://www.openedv.com/docs/boards/fpga/zdyz_linhanz(V2).html) RK3288https://www.t-firefly.com/product/rk3288.html RK3399firefly rk3399香橙派 Orange-Pi-R1-Plus-LTS 硬件通信接口UARTTTL、RS232&#x2F;RS485&#x2F;RS422I2CSPI&#x2F;QPSIADCPWMCAN&#x2F;CANFDUSBethernetPCI&#x2F;PCIERTOS RTOS，实时操作系统，可以理解为STM32与Linux之间的桥梁，由于其实现思想大都取之于Linux，所以也称之为精简版的Linux。 常用的实时操作系统有：UCOS，VxWork，FreeRTOS，RT-Thread 移植RTOS系统、多任务管理、调度算法、消息队列、信号量互斥量、事件、内存管理等。 FreeRTOS● FreeRTOS官网● FreeRTOS github源码 FreeRTOS(TM) is a market leading RTOS from Amazon Web Services ，包括FreeRTOS的所有工程 https://github.com/freertos FreeRTOS的工程源码，包括demo和kernel【submodule】https://github.com/FreeRTOS/FreeRTOS FreeRTOS kernel源码https://github.com/FreeRTOS/FreeRTOS-Kernel 发布的demo和kernel一起的源码版本https://github.com/FreeRTOS/FreeRTOS/releases 欢迎阅读韦东山百问网freeRTOS教程！ http://rtos.100ask.org/freeRTOS%E6%95%99%E7%A8%8B/index.htmlhttps://www.bilibili.com/video/BV1844y1g7ud?p=1 Linux Linux基础篇 Linux开发 Linux应用开发 Linux驱动开发 Linux内核开发 Linux基础篇 Linux常用命令、VIM学习、Linux的Shell编程、GCC编译、Makefile、CMake等 Linux应用开发 嵌入式linux应用编程、存储、网络、QT编程、TCP&#x2F;IP、HTTP协议等 Linux驱动开发 内核模块编译原理、字符设备驱动框架、平台设备驱动、设备树、I2C子系统、中断子系统、块设备驱动框架、Bootloader等 Linux内核开发 系统调用、存储管理、进程管理、内存管理、文件管理等","categories":[{"name":"ebd","slug":"ebd","permalink":"https://zoug2016.github.io/categories/ebd/"}],"tags":[{"name":"ebd","slug":"ebd","permalink":"https://zoug2016.github.io/tags/ebd/"}]},{"title":"000 Hello World","slug":"000-hello-world","date":"2023-05-01T06:35:20.000Z","updated":"2023-05-03T03:44:59.990Z","comments":true,"path":"2023/05/01/000-hello-world/","link":"","permalink":"https://zoug2016.github.io/2023/05/01/000-hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new &quot;My New Post&quot; More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"freertos","slug":"freertos","permalink":"https://zoug2016.github.io/categories/freertos/"},{"name":"mpu","slug":"mpu","permalink":"https://zoug2016.github.io/categories/mpu/"},{"name":"hexo","slug":"hexo","permalink":"https://zoug2016.github.io/categories/hexo/"},{"name":"ebd","slug":"ebd","permalink":"https://zoug2016.github.io/categories/ebd/"},{"name":"books","slug":"ebd/books","permalink":"https://zoug2016.github.io/categories/ebd/books/"}],"tags":[{"name":"freertos","slug":"freertos","permalink":"https://zoug2016.github.io/tags/freertos/"},{"name":"mpu","slug":"mpu","permalink":"https://zoug2016.github.io/tags/mpu/"},{"name":"hexo","slug":"hexo","permalink":"https://zoug2016.github.io/tags/hexo/"},{"name":"books","slug":"books","permalink":"https://zoug2016.github.io/tags/books/"},{"name":"ebd","slug":"ebd","permalink":"https://zoug2016.github.io/tags/ebd/"}]}